import numpy as np
from matplotlib.colors import ListedColormap
import matplotlib.pyplot as plt
import ipywidgets as widgets

from utils import TileTypes

color_mapping_labels = [
    (TileTypes.BARREN, TileTypes.BARREN.name, "#E7771B"),
    (TileTypes.RESIDENCE, TileTypes.RESIDENCE.name, "#5EBDE9"),
    (TileTypes.GREENERY, TileTypes.GREENERY.name, "#00EC4F"),
    (TileTypes.INDUSTRY, TileTypes.INDUSTRY.name, "#A32845"),
    (TileTypes.SERVICE, TileTypes.SERVICE.name, "#3B12F3"),
    (TileTypes.ROAD, TileTypes.ROAD.name, "#000000")
]

color_mapping_labels.sort(key=lambda x: x[0].value)

cmap = ListedColormap([color for _,_,color in color_mapping_labels])

class GridAnimator:
    """
    Generated by Claude.
    """

    def __init__(self, data, is_grid_discrete, fps=10):
        self.data = data
        self.n_timesteps = len(data)
        self.n_grids = len(data.columns)
        self.fps = fps
        self.is_playing = False
        self.is_grid_discrete = is_grid_discrete
        
        # Create widgets
        self.slider = widgets.IntSlider(
            min=1, max=self.n_timesteps, step=1, value=1,
            description='Time:', continuous_update=True
        )
        
        self.play_button = widgets.Button(
            description='▶ Play',
            button_style='success',
            icon='play'
        )
        
        self.speed_slider = widgets.IntSlider(
            min=1, max=30, step=1, value=fps,
            description='FPS:', continuous_update=True
        )
        
        self.output = widgets.Output()
        
        # Connect events
        self.play_button.on_click(self.toggle_play)
        self.slider.observe(self.on_slider_change, names='value')
        self.speed_slider.observe(self.on_speed_change, names='value')
        
        # Initial plot
        with self.output:
            self.plot_grids(1)

    def plot_grids(self, timestep):
        plt.close('all') 
        timestep-=1

        fig, axes = plt.subplots(1, self.n_grids, figsize=(6*self.n_grids, 5))
        if self.n_grids == 1:
            axes = [axes]

        for idx, (col_name, ax) in enumerate(zip(self.data.columns, axes)):
            grid = self.data[col_name].iloc[timestep]
            if self.is_grid_discrete[col_name]:
                im = ax.imshow(grid, cmap=cmap, vmin=0, vmax=7, interpolation='nearest')
                labels = [label for _,label,_ in color_mapping_labels]
                cbar = plt.colorbar(im, ax=ax, ticks=np.arange(len(labels)) + 0.5, 
                                    boundaries=np.arange(len(labels) + 1) - 0.5)
                cbar.ax.set_yticklabels(labels)
            else:
                im = ax.imshow(grid, cmap='viridis', interpolation='nearest')
                cbar = plt.colorbar(im, ax=ax, label='Value')
            ax.set_title(f'{col_name}\nTime Step: {timestep}/{self.n_timesteps}')
            ax.set_xlabel('X')
            ax.set_ylabel('Y')
            
            # Add colorbar only to the last subplot
        plt.tight_layout()
        plt.show()

    def on_slider_change(self, change):
        """Update plot when slider changes."""
        with self.output:
            self.output.clear_output(wait=True)
            self.plot_grids(change['new'])
    
    def on_speed_change(self, change):
        """Update animation speed."""
        self.fps = change['new']

    def toggle_play(self, button):
        """Toggle play/pause."""
        if not self.is_playing:
            # Start playing
            self.is_playing = True
            self.play_button.description = '⏸ Pause'
            self.play_button.button_style = 'warning'
            self.play_button.icon = 'pause'
            self.play_animation()
        else:
            # Stop playing
            self.is_playing = False
            self.play_button.description = '▶ Play'
            self.play_button.button_style = 'success'
            self.play_button.icon = 'play'
    
    def play_animation(self):
        """Animate through timesteps."""
        import time
        
        while self.is_playing and self.slider.value <= self.n_timesteps :
            self.slider.value += 1
            time.sleep(1.0 / self.fps)
        
        # Reset to beginning if reached the end
        if self.is_playing and self.slider.value > self.n_timesteps:
            self.is_playing = False
            self.play_button.description = '▶ Play'
            self.play_button.button_style = 'success'
            self.play_button.icon = 'play'

def plot_selected_columns(df, selected_columns):
    # Get all numeric columns (exclude time column if it's not numeric)
    df = df[selected_columns]
    numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
    
    # Determine number of rows and columns for subplots
    n_cols = len(numeric_cols)
    n_rows = (n_cols + 2) // 3  # 3 charts per row, adjust as needed
    
    # Create figure and subplots
    fig, axes = plt.subplots(n_rows, 3, figsize=(15, 4 * n_rows))
    axes = axes.flatten() if n_cols > 1 else [axes]
    
    # Plot each column
    for idx, col in enumerate(numeric_cols):
        steps = len(df[col])
        ax = axes[idx]
        ax.plot(np.arange(steps), df[col], linewidth=1.5)
        ax.set_ylabel(col, fontsize=10, fontweight='bold')
        ax.set_xlabel('Time Step', fontsize=9)
        ax.grid(True, alpha=0.3)
        ax.tick_params(labelsize=8)
        ax.ticklabel_format(style='plain')
    
    # Hide unused subplots
    for idx in range(len(numeric_cols), len(axes)):
        axes[idx].set_visible(False)
